name: Super-Linter

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write  # Required for SARIF upload

jobs:
  super-lint:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📁 Print repo structure
        run: tree -L 3 || echo "tree not installed"

      - name: 📄 List all checked out files
        run: find . -type f

      - name: 🧹 Run Super-Linter and show errors in UI
        id: superlint
        run: |
          echo "Running Super-Linter..."
          set -o pipefail

          # Run Super-Linter and capture all output
          SUPERLINT_OUTPUT=$(super-linter@v5.7.2 || true)
          echo "$SUPERLINT_OUTPUT"

          # Save output to log file for artifact
          echo "$SUPERLINT_OUTPUT" > super-linter-output.log

          # Extract ERROR lines
          ERRORS=$(echo "$SUPERLINT_OUTPUT" | grep "^\[ERROR\]")
          if [ -n "$ERRORS" ]; then
            echo "❌ Linter Errors Found:"
            echo "$ERRORS"
            exit 1
          else
            echo "✅ No linter errors found."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_JSON: true
          VALIDATE_PYTHON: true
          VALIDATE_JAVASCRIPT_STANDARD: true
          CREATE_LOG_FILE: true
          LOG_LEVEL: VERBOSE
          SARIF_REPORTER: true

      - name: 📝 Generate Step Summary
        if: always()
        run: |
          echo "### Super-Linter Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          # Show top 20 errors
          if [ -f super-linter-output.log ]; then
            echo "#### Linter Errors (Top 20)" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            grep "^\[ERROR\]" super-linter-output.log | head -20 >> "$GITHUB_STEP_SUMMARY" || echo "No errors found" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
          fi

          # Mention SARIF file
          if [ -f "super-linter.sarif" ]; then
            echo "📊 SARIF report generated for code scanning." >> "$GITHUB_STEP_SUMMARY"
          else
            echo "ℹ️ No SARIF file generated." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: 📊 Upload SARIF report to GitHub Code Scanning
        if: always() && hashFiles('super-linter.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: super-linter.sarif

      - name: 📦 Upload Super-Linter Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: super-linter-logs
          path: |
            super-linter-output.log
            super-linter.sarif
            /tmp/lint/
          if-no-files-found: ignore
