name: Super-Linter

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

jobs:
  super-lint:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📁 Print repo structure
        run: tree -L 3 || echo "tree not installed"

      - name: 📄 List all checked out files
        run: find . -type f

      - name: 🧹 Run Super-Linter
        uses: github/super-linter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JAVASCRIPT_STANDARD: true
          VALIDATE_PYTHON: true
          VALIDATE_JSON: true
          CREATE_LOG_FILE: true
          LOG_LEVEL: VERBOSE
          NO_COLOR: true

      # Extract only [ERROR] logs into super-linter-errors.md
      - name: 📌 Save Linter Errors to Markdown file ([ERROR] only)
        if: always()
        run: |
          ERRORS_FILE="super-linter-errors.md"
          if [ -f super-linter.log ]; then
            awk '
              /\[ERROR\]/ {
                if ($0 ~ /Command output:/) {
                  print
                  inerror=1
                  dash_count=0
                  next
                } else {
                  print
                  next
                }
              }
              inerror {
                if ($0 ~ /\[ERROR\]/ && $0 !~ /Command output:/) {
                  print
                  inerror=0
                  next
                }
                if ($0 !~ /\[DEBUG\]/) print
                if ($0 ~ /^------$/) {
                  dash_count++
                  if (dash_count == 2) inerror=0
                }
              }
            ' super-linter.log | sed -r "s/\x1B\[[0-9;]*[mK]//g" > $ERRORS_FILE
            if [ ! -s $ERRORS_FILE ]; then
              echo "✅ No lint errors found" > $ERRORS_FILE
            fi
          else
            echo "⚠️ super-linter.log not found" > $ERRORS_FILE
          fi

      # Save full logs (INFO + WARN + ERROR + FATAL) into super-linter-logs.md
      - name: 📌 Save Full Logs to Markdown file
        if: always()
        run: |
          LOGS_FILE="super-linter-logs.md"
          if [ -f super-linter.log ]; then
            sed -r "s/\x1B\[[0-9;]*[mK]//g" super-linter.log > $LOGS_FILE
          else
            echo "⚠️ super-linter.log not found" > $LOGS_FILE
          fi

      - name: 📝 Generate Step Summary
        if: always()
        run: |
          echo "### Super-Linter Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          # Code Style Check Summary
          echo "#### Code Style Check Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "This workflow checks code formatting for:" >> "$GITHUB_STEP_SUMMARY"
          echo "- JavaScript" >> "$GITHUB_STEP_SUMMARY"
          echo "- JSON" >> "$GITHUB_STEP_SUMMARY"
          echo "- Python" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          echo "| Language | Validation result |" >> "$GITHUB_STEP_SUMMARY"
          echo "|----------|-----------------| " >> "$GITHUB_STEP_SUMMARY"
          check_lang() {
            local lang="$1"
            local pattern=""
            case "$lang" in
              JAVASCRIPT_STANDARD) pattern="\[ERROR\].*Found errors in \[standard\]";;
              JSON) pattern="\[ERROR\].*Found errors in \[json\]";;
              PYTHON) pattern="\[ERROR\].*Found errors in \[python\]";;
            esac
            if grep -qE "$pattern" super-linter.log; then
              echo "| ${lang} | Fail ❌ |" >> "$GITHUB_STEP_SUMMARY"
            else
              echo "| ${lang} | Pass ✅ |" >> "$GITHUB_STEP_SUMMARY"
            fi
          }
          check_lang "JAVASCRIPT_STANDARD"
          check_lang "JSON"
          check_lang "PYTHON"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          # Extracted lint errors
          echo "#### Extracted Lint Errors" >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          cat super-linter-errors.md >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"

      # Upload both files into one artifact folder
      - name: 📦 Upload Super-Linter Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Super-linter-report
          path: |
            super-linter-errors.md
            super-linter-logs.md
          if-no-files-found: ignore
