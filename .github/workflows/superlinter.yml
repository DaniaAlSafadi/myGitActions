name: Super-Linter

on:
  workflow_dispatch:
  pull_request:

jobs:
  super-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 📁 Print repo structure
        run: tree -L 3

      - name: 📄 List all checked out files
        run: find . -type f

      - name: 🧹 Run Super-Linter
        uses: super-linter/super-linter@v7.1.0
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JSON: true
          VALIDATE_PYTHON: true
          VALIDATE_JAVASCRIPT_STANDARD: true
          VALIDATE_ALL_CODEBASE: false
          
      - name: 📝 Add Super-Linter Summary to GitHub UI
        if: always()
        run: |
          hit_flag=0
          js_errors=""
          py_errors=""
          json_errors=""

          format_path() {
            clean_path="${1#./}"
            if [[ "$clean_path" == */* ]]; then
              echo "🗂️ _${clean_path}_"
            else
              echo "📄 _${clean_path}_"
            fi
          }

          echo "## ❌ Detected Style Errors" >> "$GITHUB_STEP_SUMMARY"

          if [[ -f super-linter-output/linter.log ]]; then
            while IFS= read -r line; do
              if [[ "$line" =~ ([^:]+\.js):([0-9]+):(.*) ]]; then
                file="${BASH_REMATCH[1]}"
                rest="${BASH_REMATCH[2]}:${BASH_REMATCH[3]}"
                js_errors+=$(printf "%s\n%s\n%s\n%s\n" "$(format_path "$file")" '```js' "$rest" '```')
                hit_flag=1
              elif [[ "$line" =~ ([^:]+\.py):([0-9]+):(.*) ]]; then
                file="${BASH_REMATCH[1]}"
                rest="${BASH_REMATCH[2]}:${BASH_REMATCH[3]}"
                py_errors+=$(printf "%s\n%s\n%s\n%s\n" "$(format_path "$file")" '```py' "$rest" '```')
                hit_flag=1
              elif [[ "$line" =~ ([^:]+\.json):([0-9]+):(.*) ]]; then
                file="${BASH_REMATCH[1]}"
                rest="${BASH_REMATCH[2]}:${BASH_REMATCH[3]}"
                json_errors+=$(printf "%s\n%s\n%s\n%s\n" "$(format_path "$file")" '```json' "$rest" '```')
                hit_flag=1
              fi
            done < super-linter-output/linter.log
          fi

          if [[ -n "$js_errors" ]]; then
            echo -e "\n### JavaScript\n$js_errors" >> "$GITHUB_STEP_SUMMARY"
          fi

          if [[ -n "$py_errors" ]]; then
            echo -e "\n### Python\n$py_errors" >> "$GITHUB_STEP_SUMMARY"
          fi

          if [[ -n "$json_errors" ]]; then
            echo -e "\n### JSON\n$json_errors" >> "$GITHUB_STEP_SUMMARY"
          fi

          if [[ "$hit_flag" -eq 0 ]]; then
            echo -e "\n✅ No style issues detected in JavaScript, Python, or JSON files." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: 📦 Upload Super-Linter Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: super-linter-output
          path: super-linter-output/
