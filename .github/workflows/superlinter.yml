name: Super-Linter

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write  # Required for SARIF upload

jobs:
  super-lint:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📁 Print repo structure
        run: tree -L 3 || echo "tree not installed"

      - name: 📄 List all checked out files
        run: find . -type f

      - name: 🧹 Run Super-Linter
        uses: github/super-linter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JAVASCRIPT_STANDARD: true
          VALIDATE_PYTHON: true
          VALIDATE_JSON: true
          CREATE_LOG_FILE: true
          LOG_LEVEL: VERBOSE
          NO_COLOR: true

      - name: 📌 Save Linter Errors to Markdown file
        if: always()
        run: |
          # Create the summary table function
          create_summary_table() {
            echo "# Super-Linter Summary" > super-linter-errors.md
            echo "" >> super-linter-errors.md
            echo "| Language | Validation Result |" >> super-linter-errors.md
            echo "|----------|-------------------|" >> super-linter-errors.md
            
            check_lang() {
              local lang="$1"
              local display_name="$2"
              local pattern=""
              case "$lang" in
                JAVASCRIPT_STANDARD) pattern="\[ERROR\].*Found errors in \[standard\]";;
                JSON) pattern="\[ERROR\].*Found errors in \[json\]";;
                PYTHON) pattern="\[ERROR\].*Found errors in \[python\]";;
              esac
              if [ -f super-linter.log ] && grep -qE "$pattern" super-linter.log; then
                echo "| ${display_name} | ❌ Fail |" >> super-linter-errors.md
              else
                echo "| ${display_name} | ✅ Pass |" >> super-linter-errors.md
              fi
            }
            
            # Check each language
            check_lang "JAVASCRIPT_STANDARD" "JavaScript (Standard)"
            check_lang "JSON" "JSON"
            check_lang "PYTHON" "Python"
            echo "" >> super-linter-errors.md
          }
          
          # Create the summary table first
          create_summary_table
          
          # Then add the detailed errors
          if [ -f super-linter.log ]; then
            # Check if there are any errors
            if grep -q "\[ERROR\]" super-linter.log; then
              echo "## Detailed Lint Errors" >> super-linter-errors.md
              echo "" >> super-linter-errors.md
              echo "\`\`\`" >> super-linter-errors.md
              
              # Extract and clean up error messages
              awk '
                /\[ERROR\]/ {
                  if ($0 ~ /Command output:/) {
                    print;
                    inerror=1;
                    dash_count=0;
                    next
                  } else {
                    print;
                    next
                  }
                }
                inerror {
                  if ($0 ~ /\[ERROR\]/) {
                    if ($0 ~ /Command output:/) {
                      print;
                      dash_count=0;
                      next
                    } else {
                      print;
                      inerror=0;
                      next
                    }
                  }
                  print
                  if ($0 ~ /^------$/) {
                    dash_count++
                    if (dash_count == 2) inerror=0
                  }
                }
              ' super-linter.log | sed -r "s/\x1B\[[0-9;]*[mK]//g" >> super-linter-errors.md
              
              echo "\`\`\`" >> super-linter-errors.md
            else
              echo "## Result" >> super-linter-errors.md
              echo "" >> super-linter-errors.md
              echo "✅ No lint errors found! All code formatting checks passed." >> super-linter-errors.md
            fi
          else
            echo "## Result" >> super-linter-errors.md
            echo "" >> super-linter-errors.md
            echo "⚠️ super-linter.log not found - unable to parse results" >> super-linter-errors.md
          fi

      - name: 📝 Generate Step Summary
        if: always()
        run: |
          echo "### Super-Linter Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          # Add the summary table header
          echo "| Language | Validation result |" >> "$GITHUB_STEP_SUMMARY"
          echo "|----------|-----------------| " >> "$GITHUB_STEP_SUMMARY"
          check_lang() {
            local lang="$1"
            local pattern=""
            case "$lang" in
              JAVASCRIPT_STANDARD) pattern="\[ERROR\].*Found errors in \[standard\]";;
              JSON) pattern="\[ERROR\].*Found errors in \[json\]";;
              PYTHON) pattern="\[ERROR\].*Found errors in \[python\]";;
            esac
            if grep -qE "$pattern" super-linter.log; then
              echo "| ${lang} | Fail ❌ |" >> "$GITHUB_STEP_SUMMARY"
            else
              echo "| ${lang} | Pass ✅ |" >> "$GITHUB_STEP_SUMMARY"
            fi
          }
          # Check each language
          check_lang "JAVASCRIPT_STANDARD"
          check_lang "JSON"
          check_lang "PYTHON"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          # Add detection message if errors found
          if [ -s super-linter-errors.md ] && grep -q "## Detailed Lint Errors" super-linter-errors.md; then
            echo "Super-linter detected linting errors" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "#### Code Style Check Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "This workflow checks code formatting for:" >> "$GITHUB_STEP_SUMMARY"
          echo "- JavaScript" >> "$GITHUB_STEP_SUMMARY"
          echo "- JSON" >> "$GITHUB_STEP_SUMMARY"
          echo "- Python" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "#### Full Report Available in Artifacts" >> "$GITHUB_STEP_SUMMARY"
          echo "Download the 'super-linter-errors' artifact for the complete summary table and detailed error log." >> "$GITHUB_STEP_SUMMARY"

      - name: 📦 Upload Super-Linter Errors
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: super-linter-errors
          path: super-linter-errors.md
          if-no-files-found: ignore
