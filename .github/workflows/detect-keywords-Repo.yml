name: Detect Keywords in Repo

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  detect-keywords:
    name: Detect `console.log` or `print`
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üïµÔ∏è‚Äç‚ôÄÔ∏è Scan Entire Repo for Debug Keywords
        run: |
          echo "üîç Scanning entire repo for debug keywords..."

          hit_flag=0
          js_files=()
          py_files=()

          # Find all .js and .py files in whole repo
          while IFS= read -r file; do
            [[ "$file" == *.js ]] && js_files+=("$file")
            [[ "$file" == *.py ]] && py_files+=("$file")
          done < <(find . -type f \( -name "*.js" -o -name "*.py" \) 2>/dev/null | sort)

          echo "## üîé Keyword Scan Report" >> $GITHUB_STEP_SUMMARY

          # Function to add icon based on path with debug
          format_path() {
            local path="${1#./}"  # remove leading './' if any
            if [[ "$path" == */* ]]; then
              echo "üóÇÔ∏è _$path_"
            else
              echo "üìÑ _$path_"
            fi
          }

          # Scan JS files for console.log
          js_flag=0
          for file in "${js_files[@]}"; do
            echo "DEBUG: Checking JS file: '$file'"
            results=$(grep -Hn "console\.log" "$file" || true)
            if [[ -n "$results" ]]; then
              if [[ "$js_flag" -eq 0 ]]; then
                echo -e "**console.log found in:**" >> $GITHUB_STEP_SUMMARY
                js_flag=1
              fi
              formatted_path=$(format_path "$file")
              echo "DEBUG: Formatted JS path: '$formatted_path'"
              echo -e "\n$formatted_path" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "$results" | sed -E "s|$file:||" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              hit_flag=1
            fi
          done

          # Scan Python files for print
          py_flag=0
          for file in "${py_files[@]}"; do
            echo "DEBUG: Checking Python file: '$file'"
            results=$(grep -Hn "print" "$file" || true)
            if [[ -n "$results" ]]; then
              if [[ "$py_flag" -eq 0 ]]; then
                echo -e "\n**print found in:**" >> $GITHUB_STEP_SUMMARY
                py_flag=1
              fi
              formatted_path=$(format_path "$file")
              echo "DEBUG: Formatted Python path: '$formatted_path'"
              echo -e "\n$formatted_path" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "$results" | sed -E "s|$file:||" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              hit_flag=1
            fi
          done

          if [[ "$hit_flag" -eq 1 ]]; then
            echo "‚ùå Detected disallowed keywords."
            exit 1
          else
            echo "‚úÖ No disallowed keywords found."
            echo -e "\n‚úÖ No disallowed keywords found." >> $GITHUB_STEP_SUMMARY
          fi
