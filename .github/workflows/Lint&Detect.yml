name: Lint & Detect Keywords

on:
  push:
  workflow_dispatch:
  pull_request:
jobs:
  super-lint:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 📄 List all checked out files
        run: find . -type f

      - name: 🧹 Run Super-Linter
        uses: super-linter/super-linter@v7.1.0
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JSON: true
          VALIDATE_PYTHON: true
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_ALL_CODEBASE: true 
          JAVASCRIPT_ES_CONFIG_FILE: .eslintrc.json
          
      - name: 📝 Add Super-Linter Markdown Summary
        if: always()
        run: |
          echo "### Code Style Check Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "This workflow checks code formatting for:" >> "$GITHUB_STEP_SUMMARY"
          echo "- Python" >> "$GITHUB_STEP_SUMMARY"
          echo "- JavaScript" >> "$GITHUB_STEP_SUMMARY"
          echo "- JSON" >> "$GITHUB_STEP_SUMMARY"

      - name: 📦 Upload Super-Linter Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: super-linter-output
          path: super-linter-output/

  detect-keywords:
    name: Detect `console.log` or `print`
    runs-on: ubuntu-latest      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🕵️‍♀️ Scan Specific Files for Debug Keywords
        run: |
          echo "🔍 Scanning specified paths for debug keywords..."

          hit_flag=0
          js_flag=0
          py_flag=0

          echo "## 🔎 Keyword Scan Report" >> $GITHUB_STEP_SUMMARY

          format_path() {
            clean_path="${1#./}"
            if [[ "$clean_path" == */* ]]; then
              echo "🗂️ _${clean_path}_"
            else
              echo "📄 _${clean_path}_"
            fi
          }

          while IFS= read -r path; do
            if [[ -f "$path" ]]; then
              if [[ "$path" == *.js ]]; then
                results=$(grep -Hn "console\.log" "$path" || true)
                if [[ -n "$results" ]]; then
                  if [[ "$js_flag" -eq 0 ]]; then
                    echo "**console.log found in:**" >> $GITHUB_STEP_SUMMARY
                    js_flag=1
                  fi
                  format_path "$path" >> $GITHUB_STEP_SUMMARY
                  echo '```js' >> $GITHUB_STEP_SUMMARY
                  echo "$results" | sed -E "s|$path:||" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  hit_flag=1
                fi
              elif [[ "$path" == *.py ]]; then
                results=$(grep -Hn "print" "$path" || true)
                if [[ -n "$results" ]]; then
                  if [[ "$py_flag" -eq 0 ]]; then
                    echo -e "\n**print found in:**" >> $GITHUB_STEP_SUMMARY
                    py_flag=1
                  fi
                  format_path "$path" >> $GITHUB_STEP_SUMMARY
                  echo '```py' >> $GITHUB_STEP_SUMMARY
                  echo "$results" | sed -E "s|$path:||" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  hit_flag=1
                fi
              fi
            fi
          done <<< "$FILE_PATHS"

          if [[ "$hit_flag" -eq 1 ]]; then
            echo "❌ Detected disallowed keywords."
            exit 1
          else
            echo "✅ No disallowed keywords found."
            echo -e "\n✅ No disallowed keywords found." >> $GITHUB_STEP_SUMMARY
          fi
            - name: Upload keyword scan report
              uses: actions/upload-artifact@v4
              with:
                name: keyword-scan-report
                path: keyword-scan-output/
