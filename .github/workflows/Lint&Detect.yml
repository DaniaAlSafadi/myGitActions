name: Lint & Detect Keywords

on:
  workflow_dispatch:
  pull_request:
  push:

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üßπ Run Super-Linter
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JSON: true
          VALIDATE_PYTHON: true
          VALIDATE_JAVASCRIPT_STANDARD: true
          CREATE_LOG_FILE: true
          LOG_LEVEL: VERBOSE
          NO_COLOR: true

      - name: üìå Save Linter Errors to Markdown file ([ERROR] only)
        if: always()
        run: |
          MD_FILE="super-linter-errors.md"
          if [ -f super-linter.log ]; then
            awk '
              /\[ERROR\]/ {
                if ($0 ~ /Command output:/) {
                  print
                  inerror=1
                  dash_count=0
                  next
                } else {
                  print
                  next
                }
              }
              inerror {
                if ($0 ~ /\[ERROR\]/ && $0 !~ /Command output:/) {
                  print
                  inerror=0
                  next
                }
                if ($0 !~ /\[DEBUG\]|\[INFO\]/) print
                if ($0 ~ /^------$/) {
                  dash_count++
                  if (dash_count == 2) inerror=0
                }
              }
            ' super-linter.log | sed -r "s/\x1B\[[0-9;]*[mK]//g" > $MD_FILE
            if [ ! -s $MD_FILE ]; then
              echo "‚úÖ No lint errors found" > $MD_FILE
            fi
          else
            echo "‚ö†Ô∏è super-linter.log not found" > $MD_FILE
          fi
      - name: üìù Generate Step Summary
        if: always()
        run: |
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "#### Code Style Check Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "This workflow checks code formatting for:" >> "$GITHUB_STEP_SUMMARY"
          echo "- Python" >> "$GITHUB_STEP_SUMMARY"
          echo "- JavaScript" >> "$GITHUB_STEP_SUMMARY"
          echo "- JSON" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          # Add warning line if errors exist
          if [ -s super-linter-errors.md ] && ! grep -q "No lint errors found" super-linter-errors.md; then
            echo "Super-linter detected linting errors" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi
          # Print results table
          echo "| Language | Validation result |" >> "$GITHUB_STEP_SUMMARY"
          echo "|----------|------------------|" >> "$GITHUB_STEP_SUMMARY"
          check_lang() {
            local lang="$1"
            local pattern=""
            case "$lang" in
              JAVASCRIPT_STANDARD) pattern="\[ERROR\].*Found errors in \[standard\]";;
              JSON) pattern="\[ERROR\].*Found errors in \[json\]";;
              PYTHON) pattern="\[ERROR\].*Found errors in \[python\]";;
            esac
            if grep -qE "$pattern" super-linter.log; then
              echo "| ${lang} | Fail ‚ùå |" >> "$GITHUB_STEP_SUMMARY"
            else
              echo "| ${lang} | Pass ‚úÖ |" >> "$GITHUB_STEP_SUMMARY"
            fi
          }
          check_lang "JAVASCRIPT_STANDARD"
          check_lang "JSON"
          check_lang "PYTHON"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          # Extracted lint errors
          echo "#### Extracted Lint Errors" >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          cat super-linter-errors.md >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
      - name: üì¶ Upload Super-Linter Errors
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: super-linter-errors
          path: super-linter-errors.md
          if-no-files-found: ignore

  detect:
    name: Detect
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üïµÔ∏è‚Äç‚ôÄÔ∏è Scan for console.log or print
        run: |
          FILE_PATHS=$(find . -type f \( -name "*.js" -o -name "*.py" \))
          hit_flag=0
          js_flag=0
          py_flag=0
          mkdir -p keyword-scan-output
          REPORT_FILE=keyword-scan-output/keyword-scan-report.md
          
          # Add description and header
          echo "#### Detect console.log or print" > "$REPORT_FILE"
          echo "" >> "$REPORT_FILE"
          echo "This workflow checks for debug statements in:" >> "$REPORT_FILE"
          echo "* JavaScript (console.log)" >> "$REPORT_FILE"
          echo "* Python (print)" >> "$REPORT_FILE"
          echo "" >> "$REPORT_FILE"
          
          format_path() {
            clean_path="${1#./}"
            if [[ "$clean_path" == */* ]]; then
              echo "üóÇÔ∏è _${clean_path}_"
            else
              echo "üìÑ _${clean_path}_"
            fi
          }
          
          # First pass: check if we have any hits to determine status
          while IFS= read -r path; do
            if [[ -f "$path" ]]; then
              if [[ "$path" == *.js ]]; then
                results=$(grep -Hn "console\.log" "$path" || true)
                if [[ -n "$results" ]]; then
                  hit_flag=1
                  break
                fi
              elif [[ "$path" == *.py ]]; then
                results=$(grep -Hn "print" "$path" || true)
                if [[ -n "$results" ]]; then
                  hit_flag=1
                  break
                fi
              fi
            fi
          done <<< "$FILE_PATHS"
          
          # Add status right after header
          if [[ "$hit_flag" -eq 1 ]]; then
            echo "‚ùå Detected disallowed keywords." >> "$REPORT_FILE"
          else
            echo "‚úÖ No disallowed keywords found." >> "$REPORT_FILE"
          fi
          echo "" >> "$REPORT_FILE"
          
          # Second pass: collect and display results if any hits found
          if [[ "$hit_flag" -eq 1 ]]; then
            while IFS= read -r path; do
              if [[ -f "$path" ]]; then
                if [[ "$path" == *.js ]]; then
                  results=$(grep -Hn "console\.log" "$path" || true)
                  if [[ -n "$results" ]]; then
                    if [[ "$js_flag" -eq 0 ]]; then
                      echo "**console.log found in:**" >> "$REPORT_FILE"
                      js_flag=1
                    fi
                    format_path "$path" >> "$REPORT_FILE"
                    echo '```js' >> "$REPORT_FILE"
                    echo "$results" | sed -E "s|$path:||" >> "$REPORT_FILE"
                    echo '```' >> "$REPORT_FILE"
                  fi
                elif [[ "$path" == *.py ]]; then
                  results=$(grep -Hn "print" "$path" || true)
                  if [[ -n "$results" ]]; then
                    if [[ "$py_flag" -eq 0 ]]; then
                      echo -e "\n**print found in:**" >> "$REPORT_FILE"
                      py_flag=1
                    fi
                    format_path "$path" >> "$REPORT_FILE"
                    echo '```py' >> "$REPORT_FILE"
                    echo "$results" | sed -E "s|$path:||" >> "$REPORT_FILE"
                    echo '```' >> "$REPORT_FILE"
                  fi
                fi
              fi
            done <<< "$FILE_PATHS"
          fi
          
          # Output to step summary and exit appropriately
          cat "$REPORT_FILE" >> "$GITHUB_STEP_SUMMARY"
          
          if [[ "$hit_flag" -eq 1 ]]; then
            exit 1
          fi
          
      - name: üì¶ Upload keyword scan report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: keyword-scan-report
          path: keyword-scan-output/
